diff --git a/CMakeLists.txt b/CMakeLists.txt
index 262690e..dac4c1b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,31 +20,43 @@
 PROJECT(libRaptorQ)
 CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
 AUX_SOURCE_DIRECTORY(. SRC_LIST)
+INCLUDE(flags OPTIONAL)
 
-SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "Build mode") # default build type
-SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release RelWithDebInfo MinSizeRel)
+IF(NOT CMAKE_BUILD_TYPE) # if not specified, default to "Release"
+  SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "Build mode") # default build type
+  SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release RelWithDebInfo MinSizeRel)
+ENDIF()
 
 MESSAGE(STATUS "Build selected: ${CMAKE_BUILD_TYPE}")
 
-# easy compiler choice...
-SET(CMAKE_CXX_COMPILER "g++" CACHE STRING "C++ Compiler") # default compiler
-SET(CMAKE_C_COMPILER "gcc" CACHE STRING "C Compiler") # default compiler
-SET(STDLIB "libstdc++" CACHE STRING "Standard library to use")
-SET_PROPERTY(CACHE CMAKE_CXX_COMPILER PROPERTY STRINGS clang++ g++ c++)
-SET_PROPERTY(CACHE CMAKE_C_COMPILER PROPERTY STRINGS clang gcc cc)
-SET_PROPERTY(CACHE STDLIB PROPERTY STRINGS libc++ libstdc++)
-MARK_AS_ADVANCED(CLEAR
-	CMAKE_CXX_COMPILER
-	CMAKE_C_COMPILER
-)
+OPTION(OVERRIDE_CMAKE_GENERATOR "override cmake generator" ON)
+IF(OVERRIDE_CMAKE_GENERATOR)
+  SET(CMAKE_CXX_COMPILER "g++" CACHE STRING "C++ Compiler") # default compiler
+  SET(CMAKE_C_COMPILER "gcc" CACHE STRING "C Compiler") # default compiler
+  SET(STDLIB "libstdc++" CACHE STRING "Standard library to use")
+  SET_PROPERTY(CACHE CMAKE_CXX_COMPILER PROPERTY STRINGS clang++ g++ c++)
+  SET_PROPERTY(CACHE CMAKE_C_COMPILER PROPERTY STRINGS clang gcc cc)
+  SET_PROPERTY(CACHE STDLIB PROPERTY STRINGS libc++ libstdc++)
+  MARK_AS_ADVANCED(CLEAR
+          CMAKE_CXX_COMPILER
+          CMAKE_C_COMPILER
+  )
+ENDIF()
 
 # Link time optimization: smaller, better optimized libraries
-SET(LTO "yes" CACHE STRING "Link Time Optimization")
-SET_PROPERTY(CACHE LTO PROPERTY STRINGS yes no)
+OPTION(LTO "Link Time Optimization" ON)
 
 # profiling support: optimize the library
-SET(PROFILING "yes" CACHE STRING "Optimize library assembly")
-SET_PROPERTY(CACHE PROFILING PROPERTY STRINGS yes no)
+OPTION(PROFILING "Optimize library assembly" ON)
+
+OPTION(BUILD_SHARED_LIB "Build and install Shared library" ON)
+
+# internal compiler error from eigen Core/MatrixBase.h
+# in splice_child_die at dwarf2out.c:4706
+# unless we turn OFF LTO for this case (gcc 4.8)
+IF(BUILD_SHARED_LIB AND LTO AND CMAKE_BUILD_TYPE STREQUAL Debug)
+  SET(LTO OFF)
+ENDIF()
 
 SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake; ${CMAKE_MODULE_PATH})
 
@@ -54,33 +66,33 @@ FIND_PACKAGE(eigen REQUIRED)
 INCLUDE_DIRECTORIES(SYSTEM ${EIGEN3_INCLUDE_DIR})
 
 #This only works if *FIRST* you checkout a commit and *THEN* you run cmake
-IF(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git/)
-MESSAGE(STATUS "directory found")
 IF(GIT_FOUND)
-    EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} rev-parse --sq HEAD OUTPUT_VARIABLE SEED)
-    SET(DETERMINISTIC "-frandom-seed=${SEED}")
-ENDIF()
+  EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} rev-parse --sq HEAD OUTPUT_VARIABLE SEED ERROR_VARIABLE gitErr)
+  IF(gitErr)
+    SET(SEED "RaptorQ_giterr")
+    MESSAGE(WARNING "git rev-parse failed. compiler seed is now constant.")
+  ENDIF()
 ELSE()
-    SET(DETERMINISTIC "-frandom-seed=RaptorQ_nongit")
-    MESSAGE(WARNING "Not inside a git repository. compiler seed is now constant.")
+  SET(SEED "RaptorQ_nongit")
+  MESSAGE(WARNING "Not inside a git repository. compiler seed is now constant.")
 ENDIF()
+SET(DETERMINISTIC "-frandom-seed=${SEED}")
 
-IF("${LTO}" STREQUAL "yes")
+IF(LTO)
 	MESSAGE(STATUS "Link Time Optimization activated")
 ELSE()
 	MESSAGE(STATUS "Link Time Optimization deactivated")
 ENDIF()
 #activate profiling if requested.
 # profiling needs to build a test, which needs threading.
-IF (PROFILING STREQUAL "yes")
+IF (PROFILING)
 	MESSAGE(STATUS "Profiling activated")
 ELSE()
 	MESSAGE(STATUS "Profiling deactivated")
-	SET (PROFILING	"no")
 ENDIF()
 
 # setup the compiler and the standard library
-IF(STDLIB)
+IF(STDLIB AND OVERRIDE_CMAKE_GENERATOR)
 	IF(${STDLIB} STREQUAL "libc++" AND NOT (${CMAKE_CXX_COMPILER} MATCHES "^.*c[+][+]$" OR ${CMAKE_CXX_COMPILER} MATCHES "^(.*/)g[+][+]$"))
 		# gcc is particoularly unhappy with libc++ headers...
 		INCLUDE_DIRECTORIES(SYSTEM ${CLANG_C_INCLUDE_DIR})
@@ -92,45 +104,119 @@ IF(STDLIB)
 		FIND_PACKAGE(std_gcc REQUIRED)
 		INCLUDE_DIRECTORIES(SYSTEM ${GCC_STD_INCLUDE_DIR})
 	ENDIF()
-ENDIF(STDLIB)
+ENDIF()
 # generic standard library support, put it as compiler option:
 IF(${STDLIB} MATCHES "^.+$")
 	SET(STDLIB_FLAG		"-stdlib=${STDLIB}")
 ENDIF()
+INCLUDE(CheckLibraryExists)
+check_library_exists(ubsan __ubsan_handle_type_mismatch "" HAS_LIBUBSAN)
+
+if(NOT COMMAND xpStringAppendIfDne)
+  function(xpStringAppendIfDne appendTo str)
+    if("${${appendTo}}" STREQUAL "")
+      set(${appendTo} ${str} PARENT_SCOPE)
+    else()
+      string(FIND ${${appendTo}} ${str} pos)
+      if(${pos} EQUAL -1)
+        set(${appendTo} "${${appendTo}} ${str}" PARENT_SCOPE)
+      endif()
+    endif()
+  endfunction()
+endif()
+
+if(NOT COMMAND xpCheckCompilerFlags)
+  include(CheckCCompilerFlag)
+  include(CheckCXXCompilerFlag)
+  function(xpCheckCompilerFlags flagVar flags)
+    separate_arguments(flags)
+    foreach(flag ${flags})
+      string(REPLACE "-" "_" flag_ ${flag})
+      string(REPLACE "=" "_" flag_ ${flag_})
+      if(flagVar MATCHES ".*CXX_FLAGS.*")
+        check_cxx_compiler_flag("${flag}" has_cxx${flag_})
+        if(has_cxx${flag_})
+          xpStringAppendIfDne(${flagVar} "${flag}")
+        endif()
+      elseif(flagVar MATCHES ".*C_FLAGS.*")
+        check_c_compiler_flag("${flag}" has_c${flag_})
+        if(has_c${flag_})
+          xpStringAppendIfDne(${flagVar} "${flag}")
+        endif()
+      endif()
+    endforeach()
+    set(${flagVar} "${${flagVar}}" PARENT_SCOPE)
+  endfunction()
+endif()
+
+if(NOT COMMAND xpCheckLinkerFlag)
+  function(xpCheckLinkerFlag _FLAG _RESULT)
+    set(srcFile ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/linksrc.cxx)
+    file(WRITE ${srcFile} "int main() { return 0; }\n")
+    message(STATUS "Performing Linker Test ${_RESULT}")
+    try_compile(${_RESULT} ${CMAKE_BINARY_DIR} ${srcFile}
+      CMAKE_FLAGS -DCMAKE_EXE_LINKER_FLAGS="${_FLAG}"
+      OUTPUT_VARIABLE OUTPUT
+      )
+    if(${${_RESULT}})
+      message(STATUS "Performing Linker Test ${_RESULT} - Success")
+    else()
+      message(STATUS "Performing Linker Test ${_RESULT} - Failed")
+    endif()
+    set(${_RESULT} ${${_RESULT}} PARENT_SCOPE)
+  endfunction()
+endif()
+
+if(NOT COMMAND xpCheckLinkerOptions)
+  function(xpCheckLinkerOptions linkVar options)
+    separate_arguments(options)
+    foreach(opt ${options})
+      string(REPLACE "-" "_" opt_ ${opt})
+      string(REPLACE "," "" opt_ ${opt_})
+      xpCheckLinkerFlag("${opt}" has_link${opt_})
+      if(has_link${opt_})
+        xpStringAppendIfDne(${linkVar} "${opt}")
+      endif()
+    endforeach()
+    set(${linkVar} "${${linkVar}}" PARENT_SCOPE)
+  endfunction()
+endif()
 
 #
 # C++ options
 #
 IF(${CMAKE_CXX_COMPILER} MATCHES ".*clang.*")
-	IF (PROFILING STREQUAL "yes")
+	IF (PROFILING)
 		MESSAGE(WARNING		"Profiling and clang breaks deterministic builds")
 		SET (PROFILE_GET           "-fprofile-instr-generate -g")
 		SET (PROFILE_GET_FILE      "RaptorQ.profraw")
 		SET (PROFILE_SET_FILE      "RaptorQ.profdata")
 		SET (PROFILE_SET           "-fprofile-instr-use=${PROFILE_SET_FILE}")
 	ENDIF()
-	IF("${LTO}" STREQUAL "yes")
-		SET(CMAKE_CXX_FLAGS		"${CMAKE_CXX_FLAGS} -flto -fuse-ld=gold")
-		SET(CMAKE_C_FLAGS		"${CMAKE_C_FLAGS} -flto -fuse-ld=gold")
-		FIND_PROGRAM(LLVM_AR "llvm-ar")
-		FIND_PROGRAM(LLVM_NM "llvm-nm")
-		FIND_PROGRAM(LLVM_RANLIB "llvm-ranlib")
-		SET(CMAKE_AR ${LLVM_AR})
+	IF(LTO)
+		xpCheckCompilerFlags(CMAKE_CXX_FLAGS "-flto -fuse-ld=gold")
+		xpCheckCompilerFlags(CMAKE_C_FLAGS "-flto -fuse-ld=gold")
 		SET(LINK_FLAGS "-rng-seed=${SEED} --build-id=none")
-		SET(CMAKE_NM ${LLVM_NM})
-		SET(CMAKE_RANLIB ${LLVM_RANLIB})
+		IF(OVERRIDE_CMAKE_GENERATOR)
+			FIND_PROGRAM(LLVM_AR "llvm-ar")
+			FIND_PROGRAM(LLVM_NM "llvm-nm")
+			FIND_PROGRAM(LLVM_RANLIB "llvm-ranlib")
+			SET(CMAKE_AR ${LLVM_AR})
+			SET(CMAKE_NM ${LLVM_NM})
+			SET(CMAKE_RANLIB ${LLVM_RANLIB})
+		ENDIF()
 	ENDIF()
-	SET(CMAKE_CXX_FLAGS                "${CMAKE_CXX_FLAGS} ${STDLIB_FLAG} ${DETERMINISTIC} -std=c++11 -fno-rtti -fno-exceptions -Wall -pedantic -Weverything -Wno-c++98-compat-pedantic -Wno-c++98-compat -Wno-padded -fstack-protector-all -fstrict-aliasing ")
-	SET(CMAKE_CXX_FLAGS_DEBUG          "${CMAKE_CXX_FLAGS} ${STDLIB_FLAG} ${DETERMINISTIC} -std=c++11 -O0 -g -fno-rtti -fno-exceptions -Wall -pedantic -Weverything -Wno-c++98-compat-pedantic -Wno-c++98-compat -Wno-padded -fstack-protector-all -fstrict-aliasing ")
-	SET(CMAKE_CXX_FLAGS_MINSIZEREL     "${CMAKE_CXX_FLAGS} ${STDLIB_FLAG} ${DETERMINISTIC} -std=c++11 -Os -DNDEBUG -fno-rtti -fno-exceptions -Wall -pedantic -Weverything -Wno-c++98-compat-pedantic -Wno-c++98-compat -Wno-padded -fstack-protector-all -fstrict-aliasing ")
-	SET(CMAKE_CXX_FLAGS_RELEASE        "${CMAKE_CXX_FLAGS} ${STDLIB_FLAG} ${DETERMINISTIC} -std=c++11 -Ofast -fvisibility=hidden -fvisibility-inlines-hidden -DNDEBUG -fno-rtti -fno-exceptions -Wall -pedantic -Weverything -Wno-c++98-compat-pedantic -Wno-c++98-compat -Wno-padded -fstack-protector-all -fstrict-aliasing -fwrapv -Wformat -Wformat-security -fPIE -fPIC ")
-	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS} ${STDLIB_FLAG} ${DETERMINISTIC} -std=c++11 -Ofast -g -fvisibility=hidden -fvisibility-inlines-hidden -DNDEBUG -fno-rtti -fno-exceptions -Wall -pedantic -Weverything -Wno-c++98-compat-pedantic -Wno-c++98-compat -Wno-padded -fstack-protector-all -fstrict-aliasing -fwrapv -Wformat -Wformat-security -fPIE -fPIC ")
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS "${STDLIB_FLAG} ${DETERMINISTIC} -std=c++11 -fno-rtti -fno-exceptions -Wall -pedantic -Weverything -Wno-c++98-compat-pedantic -Wno-c++98-compat -Wno-padded -fstack-protector-all -fstrict-aliasing")
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS_DEBUG "-O0 -g")
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG")
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS_RELEASE "-Ofast -fvisibility=hidden -fvisibility-inlines-hidden -DNDEBUG -fwrapv -Wformat -Wformat-security -fPIE -fPIC")
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-Ofast -g -fvisibility=hidden -fvisibility-inlines-hidden -DNDEBUG -fwrapv -Wformat -Wformat-security -fPIE -fPIC")
 	ADD_DEFINITIONS(-DUSING_CLANG)
 	SET(USE_CLANG 1)
 ELSE()
 	# warn: clang+ and g++ get the same *g++ regexp, keep the "else" above or match the "/" in the regexp
 	IF(${CMAKE_CXX_COMPILER} MATCHES "^.*c[+][+]$" OR ${CMAKE_CXX_COMPILER} MATCHES "^(.*/)g[+][+]$")
-	IF (PROFILING STREQUAL "yes")
+	IF (PROFILING)
 		SET (PROFILE_GET           "-fprofile-generate")
 		# gcc creates a couple more files than clang for prifiling. Track them.
 		SET (PROFILE_GET_FILE
@@ -144,23 +230,27 @@ CMakeFiles/test_c_profiled.dir/test/test_c.c.gcda)
 		SET (PROFILE_SET_FILE      ${PROFILE_GET_FILE})
 		SET (PROFILE_SET           "-fprofile-use")
 	ENDIF()
-	IF("${LTO}" STREQUAL "yes")
-		SET(CMAKE_CXX_FLAGS		"${CMAKE_CXX_FLAGS} -flto -fuse-ld=gold")
-		SET(CMAKE_C_FLAGS		"${CMAKE_C_FLAGS} -flto -fuse-ld=gold")
-		FIND_PROGRAM(GCC_AR "gcc-ar")
-		FIND_PROGRAM(GCC_NM "gcc-nm")
-		FIND_PROGRAM(GCC_RANLIB "gcc-ranlib")
-		SET(CMAKE_AR ${GCC_AR})
+	IF(LTO)
+		xpCheckCompilerFlags(CMAKE_CXX_FLAGS "-flto -fuse-ld=gold")
+		xpCheckCompilerFlags(CMAKE_C_FLAGS "-flto -fuse-ld=gold")
 		SET(LINK_FLAGS "-D")
-		SET(CMAKE_NM ${GCC_NM})
-	SET(CMAKE_RANLIB ${GCC_RANLIB})
+		IF(OVERRIDE_CMAKE_GENERATOR)
+			FIND_PROGRAM(GCC_AR "gcc-ar")
+			FIND_PROGRAM(GCC_NM "gcc-nm")
+			FIND_PROGRAM(GCC_RANLIB "gcc-ranlib")
+			SET(CMAKE_AR ${GCC_AR})
+			SET(CMAKE_NM ${GCC_NM})
+			SET(CMAKE_RANLIB ${GCC_RANLIB})
+		ENDIF()
+	ENDIF()
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS "-std=c++11 ${DETERMINISTIC} -fno-rtti -fno-exceptions -Wno-unknown-pragmas -Wall -pedantic -Wno-padded -fstack-protector-all -fstrict-aliasing -fwrapv")
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -Wno-aggressive-loop-optimizations -ftrapv -fisolate-erroneous-paths-dereference -fisolate-erroneous-paths-attribute")
+	IF(HAS_LIBUBSAN)
+		xpCheckCompilerFlags(CMAKE_CXX_FLAGS_DEBUG "-fsanitize=undefined -fsanitize=shift -fsanitize=integer-divide-by-zero -fsanitize=vla-bound -fsanitize=null -fsanitize=return -fsanitize=signed-integer-overflow")
 	ENDIF()
-	SET(CMAKE_CXX_FLAGS		   "${CMAKE_CXX_FLAGS} -std=c++11 ${DETERMINISTIC} -fno-rtti -fno-exceptions -Wno-unknown-pragmas -Wall -pedantic -Wno-padded  -fstack-protector-all -fstrict-aliasing -fwrapv")
-# FIXME: some of these are gcc4.9+ only
-	SET(CMAKE_CXX_FLAGS_DEBUG          "${CMAKE_CXX_FLAGS} -std=c++11 ${DETERMINISTIC} -fno-rtti -fno-exceptions -Wno-unknown-pragmas -O0 -g -Wall -pedantic -Wno-padded -fstack-protector-all -Wno-aggressive-loop-optimizations -fstrict-aliasing -ftrapv -fwrapv -fsanitize=undefined -fsanitize=shift -fsanitize=integer-divide-by-zero -fsanitize=vla-bound -fsanitize=null -fsanitize=return -fsanitize=signed-integer-overflow -fisolate-erroneous-paths-dereference -fisolate-erroneous-paths-attribute ")
-	SET(CMAKE_CXX_FLAGS_MINSIZEREL     "${CMAKE_CXX_FLAGS} -std=c++11 ${DETERMINISTIC} -fno-rtti -fno-exceptions -Wno-unknown-pragmas -Os -DNDEBUG -Wall -pedantic -Wno-padded -fstack-protector-all -fstrict-aliasing ")
-	SET(CMAKE_CXX_FLAGS_RELEASE        "${CMAKE_CXX_FLAGS} -std=c++11 ${DETERMINISTIC} -fno-rtti -fno-exceptions -Wno-unknown-pragmas -Ofast -fvisibility=hidden -fvisibility-inlines-hidden -O4 -DNDEBUG -Wall -pedantic -Wno-padded -fstack-protector-all -fstrict-aliasing -fwrapv -Wformat -Wformat-security -fPIE -fPIC ")
-	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS} -std=c++11 ${DETERMINISTIC} -fno-rtti -fno-exceptions -Wno-unknown-pragmas -Ofast -g -fvisibility=hidden -fvisibility-inlines-hidden -O4 -DNDEBUG -Wall -pedantic -Wno-padded -fstack-protector-all -fstrict-aliasing -fwrapv -Wformat -Wformat-security -fPIE -fPIC ")
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG")
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS_RELEASE "-Ofast -fvisibility=hidden -fvisibility-inlines-hidden -O4 -DNDEBUG -Wformat -Wformat-security -fPIE -fPIC")
+	xpCheckCompilerFlags(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-Ofast -g -fvisibility=hidden -fvisibility-inlines-hidden -O4 -DNDEBUG -Wformat -Wformat-security -fPIE -fPIC")
 	ENDIF()
 	# else I do not know your compiler options :)
 ENDIF()
@@ -169,20 +259,22 @@ ENDIF()
 # set the proper options for that, too
 #
 IF(${CMAKE_C_COMPILER} MATCHES ".*clang.*")
-	SET(CMAKE_C_FLAGS                "${CMAKE_C_FLAGS} ${DETERMINISTIC} -std=c11 -Wall -pedantic -Weverything -Wno-padded -fstack-protector-all -fstrict-aliasing -Wno-disabled-macro-expansion ")
-	SET(CMAKE_C_FLAGS_DEBUG          "${CMAKE_C_FLAGS} ${DETERMINISTIC} -std=c11 -O0 -g -Wall -pedantic -Weverything -Wno-padded -fstack-protector-all -fstrict-aliasing -Wno-disabled-macro-expansion ")
-	SET(CMAKE_C_FLAGS_MINSIZEREL     "${CMAKE_C_FLAGS} ${DETERMINISTIC} -std=c11 -Os    -fvisibility=hidden -fvisibility-inlines-hidden -DNDEBUG -Wall -pedantic -Weverything -Wno-padded -fstack-protector-all -fstrict-aliasing -fwrapv -Wformat -Wformat-security -fPIE -fPIC -Wno-disabled-macro-expansion ")
-	SET(CMAKE_C_FLAGS_RELEASE        "${CMAKE_C_FLAGS} ${DETERMINISTIC} -std=c11 -Ofast -fvisibility=hidden -fvisibility-inlines-hidden -DNDEBUG -Wall -pedantic -Weverything -Wno-padded -fstack-protector-all -fstrict-aliasing -fwrapv -Wformat -Wformat-security -fPIE -fPIC -Wno-disabled-macro-expansion ")
+	xpCheckCompilerFlags(CMAKE_C_FLAGS "${DETERMINISTIC} -std=c11 -Wall -pedantic -Weverything -Wno-padded -fstack-protector-all -fstrict-aliasing -Wno-disabled-macro-expansion")
+	xpCheckCompilerFlags(CMAKE_C_FLAGS_DEBUG "-O0 -g")
+	xpcheckCompilerFlags(CMAKE_C_FLAGS_MINSIZEREL "-Os -fvisibility=hidden -fvisibility-inlines-hidden -DNDEBUG -fwrapv -Wformat -Wformat-security -fPIE -fPIC")
+	xpCheckCompilerFlags(CMAKE_C_FLAGS_RELEASE "-Ofast -fvisibility=hidden -fvisibility-inlines-hidden -DNDEBUG -fwrapv -Wformat -Wformat-security -fPIE -fPIC")
 	ADD_DEFINITIONS(-DUSING_CLANG)
 ELSE()
 	# warn: clang+ and g++ get the same *g++ regexp, keep the "else" above or match the "/" in the regexp
 	IF(${CMAKE_C_COMPILER} MATCHES "^.*cc$" OR ${CMAKE_C_COMPILER} MATCHES "^(.*/)gcc$")
 
-	SET(CMAKE_C_FLAGS		   "${CMAKE_C_FLAGS} -std=c11 ${DETERMINISTIC} -Wno-unknown-pragmas -Wall -pedantic -Wno-padded  -fstack-protector-all -fstrict-aliasing -fwrapv")
-# FIXME: some of these are gcc4.9+ only
-	SET(CMAKE_C_FLAGS_DEBUG          "${CMAKE_C_FLAGS} -std=c11 ${DETERMINISTIC} -Wno-unknown-pragmas -O0 -g -Wall -pedantic -Wno-padded -fstack-protector-all -Wno-aggressive-loop-optimizations -fstrict-aliasing -ftrapv -fwrapv -fsanitize=undefined -fsanitize=shift -fsanitize=integer-divide-by-zero -fsanitize=vla-bound -fsanitize=null -fsanitize=return -fsanitize=signed-integer-overflow -fisolate-erroneous-paths-dereference -fisolate-erroneous-paths-attribute ")
-	SET(CMAKE_C_FLAGS_MINSIZEREL     "${CMAKE_C_FLAGS} -std=c11 ${DETERMINISTIC} -Wno-unknown-pragmas -Os -DNDEBUG -Wall -pedantic -Wno-padded -fstack-protector-all -fstrict-aliasing ")
-	SET(CMAKE_C_FLAGS_RELEASE        "${CMAKE_C_FLAGS} -std=c11 ${DETERMINISTIC} -Wno-unknown-pragmas -Ofast -fvisibility=hidden -DNDEBUG -Wall -pedantic -Wno-padded -fstack-protector-all -fstrict-aliasing -fwrapv -Wformat -Wformat-security -fPIE -fPIC ")
+	xpCheckCompilerFlags(CMAKE_C_FLAGS "-std=c11 ${DETERMINISTIC} -Wno-unknown-pragmas -Wall -pedantic -Wno-padded -fstack-protector-all -fstrict-aliasing -fwrapv")
+	xpCheckCompilerFlags(CMAKE_C_FLAGS_DEBUG "-O0 -g -Wno-aggressive-loop-optimizations -ftrapv -fisolate-erroneous-paths-dereference -fisolate-erroneous-paths-attribute")
+	IF(HAS_LIBUBSAN)
+		xpCheckCompilerFlags(CMAKE_C_FLAGS_DEBUG "-fsanitize=undefined -fsanitize=shift -fsanitize=integer-divide-by-zero -fsanitize=vla-bound -fsanitize=null -fsanitize=return -fsanitize=signed-integer-overflow")
+	ENDIF()
+	xpCheckCompilerFlags(CMAKE_C_FLAGS_MINSIZEREL "-Os -DNDEBUG")
+	xpCheckCompilerFlags(CMAKE_C_FLAGS_RELEASE "-Ofast -fvisibility=hidden -DNDEBUG -Wformat -Wformat-security -fPIE -fPIC")
 	ENDIF()
 	# else I do not know your compiler options :)
 ENDIF()
@@ -194,9 +286,14 @@ ENDIF()
 IF(UNIX)
   MESSAGE(STATUS "UNIX system found")
   ADD_DEFINITIONS(-DUNIX)
+  IF(${CMAKE_SYSTEM_NAME} STREQUAL SunOS)
+    # Avoid bringing in /usr/include/sys/regset.h on Solaris, which has ugly
+    # macro polution which breaks the build. (Encoder.hpp ESI conflict)
+    ADD_DEFINITIONS(-D_SYS_REGSET_H -D_SYS_UCONTEXT_H)
+  ENDIF()
 ELSEIF(WIN32)
-  MESSAGE(STATUS "Wndows system found. WARN: not tested!")
-  ADD_DEFINITION(-DWIN32)
+  MESSAGE(STATUS "Windows system found. WARN: not tested!")
+  ADD_DEFINITIONS(-DWIN32)
 ENDIF()
 
 
@@ -227,7 +324,7 @@ SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
 # LATEX documentation
 add_subdirectory(${CMAKE_SOURCE_DIR}/doc)
 
-IF(PROFILING STREQUAL "yes")
+IF(PROFILING)
 	# we need to build a profiling version of the static library.
 	# then we will run the profiling,  and then finally rebuild
 	# everything with the profiling optimizations
@@ -235,11 +332,14 @@ IF(PROFILING STREQUAL "yes")
 	# build the static library for profiling
 	ADD_LIBRARY(RaptorQ_static_profiling STATIC ${SOURCES} ${HEADERS})
 	# ar: add deterministic build
-	SET_TARGET_PROPERTIES (
-		RaptorQ_static_profiling
-		PROPERTIES
-		LINK_FLAGS "-Wl,-z,now,-z,relro -pie"
-	)
+	xpCheckLinkerOptions(RaptorQ_static_profiling_linkFlags "-Wl,-z,now,-z,relro -pie")
+	IF(RaptorQ_static_profiling_linkFlags)
+		SET_TARGET_PROPERTIES (
+			RaptorQ_static_profiling
+			PROPERTIES
+			LINK_FLAGS "${RaptorQ_static_profiling_linkFlags}"
+		)
+        ENDIF()
 	TARGET_LINK_LIBRARIES(RaptorQ_static_profiling  stdc++)
 	SET_TARGET_PROPERTIES(RaptorQ_static_profiling PROPERTIES COMPILE_FLAGS ${PROFILE_GET})
 
@@ -247,7 +347,7 @@ IF(PROFILING STREQUAL "yes")
 	ADD_EXECUTABLE(test_c_profiled test/test_c.c)
 	ADD_DEPENDENCIES(test_c_profiled RaptorQ_static_profiling)
 	SET_TARGET_PROPERTIES(test_c_profiled PROPERTIES COMPILE_FLAGS ${PROFILE_GET})
-	TARGET_LINK_LIBRARIES(test_c_profiled ${LIBRARY_OUTPUT_PATH}/libRaptorQ_static_profiling.a)
+	TARGET_LINK_LIBRARIES(test_c_profiled RaptorQ_static_profiling)
 	STRING(SUBSTRING ${STDLIB} 3 -1 STDLIB_NAME)
 	TARGET_LINK_LIBRARIES(test_c_profiled ${STDLIB_NAME})
 	TARGET_LINK_LIBRARIES(test_c_profiled m) # math library
@@ -290,12 +390,15 @@ IF(PROFILING STREQUAL "yes")
 ENDIF()
 
 ADD_LIBRARY(RaptorQ_static STATIC ${SOURCES} ${HEADERS})
-SET_TARGET_PROPERTIES (
-	RaptorQ_static
-	PROPERTIES
-	LINK_FLAGS "-Wl,-z,now,-z,relro -pie"
-)
-IF(PROFILING STREQUAL "yes")
+xpCheckLinkerOptions(RaptorQ_static_linkFlags "-Wl,-z,now,-z,relro -pie")
+IF(RaptorQ_static_linkFlags)
+	SET_TARGET_PROPERTIES (
+		RaptorQ_static
+		PROPERTIES
+		LINK_FLAGS "${RaptorQ_static_linkFlags}"
+	)
+ENDIF()
+IF(PROFILING)
 	ADD_DEPENDENCIES(RaptorQ_static profile)
 	SET_TARGET_PROPERTIES(RaptorQ_static PROPERTIES COMPILE_FLAGS ${PROFILE_SET})
 ENDIF()
@@ -303,7 +406,7 @@ ENDIF()
 ADD_EXECUTABLE(make_deterministic src/deterministic.cpp)
 add_custom_command(
   OUTPUT deterministic.run
-  COMMAND make_deterministic ${LIBRARY_OUTPUT_PATH}/libRaptorQ_static.a
+  COMMAND make_deterministic $<TARGET_FILE:RaptorQ_static>
   DEPENDS RaptorQ_static
   COMMENT "Removing creation date from library..."
   VERBATIM
@@ -313,51 +416,64 @@ add_custom_target(
   DEPENDS deterministic.run
 )
 
-ADD_DEFINITIONS(-DRAPTORQ_DLL)
-ADD_DEFINITIONS(-DRAPTORQ_DLL_EXPORTS)
+IF(BUILD_SHARED_LIB)
+  ADD_DEFINITIONS(-DRAPTORQ_DLL)
+  ADD_DEFINITIONS(-DRAPTORQ_DLL_EXPORTS)
 
-ADD_LIBRARY(RaptorQ SHARED ${SOURCES} ${HEADERS})
-# add profiling dependency if requested
-IF(PROFILING STREQUAL "yes")
-	ADD_DEPENDENCIES(RaptorQ profile)
+  ADD_LIBRARY(RaptorQ SHARED ${SOURCES} ${HEADERS})
+  # add profiling dependency if requested
+  IF(PROFILING)
+  	ADD_DEPENDENCIES(RaptorQ profile)
 	SET_TARGET_PROPERTIES(RaptorQ PROPERTIES COMPILE_FLAGS ${PROFILE_SET})
+  ENDIF()
+  xpCheckLinkerOptions(RaptorQ_linkFlags "-Wl,-z,now,-z,relro")
+  IF(RaptorQ_linkFlags)
+	SET_TARGET_PROPERTIES (
+		RaptorQ
+		PROPERTIES
+		LINK_FLAGS "${RaptorQ_linkFlags}"
+	)
+  ENDIF()
+  SET(INSTALL_LIBS RaptorQ)
+  SET(theRaptorQLib RaptorQ)
+ELSE()
+  SET(INSTALL_LIBS RaptorQ_static)
+  SET(theRaptorQLib RaptorQ_static)
 ENDIF()
-SET_TARGET_PROPERTIES (
-	RaptorQ
-	PROPERTIES
-	LINK_FLAGS "-Wl,-z,now,-z,relro"
-)
-
 
 # add main tests
 ADD_EXECUTABLE(libRaptorQ-test EXCLUDE_FROM_ALL test/rfc_test.cpp)
-ADD_DEPENDENCIES(libRaptorQ-test RaptorQ)
+ADD_DEPENDENCIES(libRaptorQ-test ${theRaptorQLib})
 TARGET_LINK_LIBRARIES(libRaptorQ-test ${CMAKE_THREAD_LIBS_INIT})
 # link the library we just built, too
-TARGET_LINK_LIBRARIES(libRaptorQ-test ${LIBRARY_OUTPUT_PATH}/libRaptorQ.so)
-INSTALL(TARGETS libRaptorQ-test RUNTIME DESTINATION bin/ OPTIONAL)
+TARGET_LINK_LIBRARIES(libRaptorQ-test ${theRaptorQLib})
+# see EXCLUDE_FROM_ALL in cmake-properties, Properties on Targets:
+# "Installing a target with EXCLUDE_FROM_ALL set to true has undefined behavior."
+#INSTALL(TARGETS libRaptorQ-test RUNTIME DESTINATION bin/ OPTIONAL)
 ADD_CUSTOM_TARGET(tests DEPENDS libRaptorQ-test)
 
 # build examples
 # C interface
 ADD_EXECUTABLE(test_c EXCLUDE_FROM_ALL test/test_c.c)
-ADD_DEPENDENCIES(test_c RaptorQ)
+ADD_DEPENDENCIES(test_c ${theRaptorQLib})
 TARGET_LINK_LIBRARIES(test_c ${CMAKE_THREAD_LIBS_INIT})
 # link the library we just built, too
-TARGET_LINK_LIBRARIES(test_c ${LIBRARY_OUTPUT_PATH}/libRaptorQ.so)
+TARGET_LINK_LIBRARIES(test_c ${theRaptorQLib})
 # CPP interface
 ADD_EXECUTABLE(test_cpp EXCLUDE_FROM_ALL test/test_cpp.cpp)
-ADD_DEPENDENCIES(test_cpp RaptorQ)
+ADD_DEPENDENCIES(test_cpp ${theRaptorQLib})
 TARGET_LINK_LIBRARIES(test_cpp ${CMAKE_THREAD_LIBS_INIT})
 # link the library we just built, too
-TARGET_LINK_LIBRARIES(test_cpp ${LIBRARY_OUTPUT_PATH}/libRaptorQ.so)
+TARGET_LINK_LIBRARIES(test_cpp ${theRaptorQLib})
 ADD_CUSTOM_TARGET(examples DEPENDS test_c test_cpp)
 
 ADD_CUSTOM_TARGET(everything DEPENDS Make_static_deterministic tests examples docs)
 
 
 INSTALL(FILES ${HEADERS} DESTINATION include/RaptorQ/)
-INSTALL(TARGETS RaptorQ RaptorQ_static
+INSTALL(TARGETS ${INSTALL_LIBS} EXPORT libraptorq-targets
 	 LIBRARY DESTINATION lib COMPONENT libraries
-	 ARCHIVE DESTINATION lib COMPONENT libraries)
+	 ARCHIVE DESTINATION lib COMPONENT libraries
+	 RUNTIME DESTINATION bin COMPONENT libraries)
+INSTALL(EXPORT libraptorq-targets DESTINATION lib/cmake)
 
diff --git a/README b/README
index d466667..5fde0d0 100644
--- a/README
+++ b/README
@@ -126,12 +126,12 @@ currently is the clang + profiling one. It probably can not
 be fixed.
 
 You can customize the CMake build with tthe following variables:
-PROFILING	yes/no: Default:yes. Activate or deactivate profiling.
+PROFILING	ON/OFF: Default:ON. Activate or deactivate profiling.
 				Profiling compiles everything, then runs a test to see
 				which code paths are more used. Then it recompiles everything
-				but optimizing for for those code paths.
+				but optimizing for those code paths.
 				Only for gcc/clang.
-LTO			yes/no: Default:yes. Activate or deactivate Link time Optimization
+LTO			ON/OFF: Default:ON. Activate or deactivate Link time Optimization
 				Makes the library smaller and better optimized.
 				Only for gcc/clang.
 STDLIB		libc++,libstdc++. Choose the standard library to use.
diff --git a/src/Interleaver.hpp b/src/Interleaver.hpp
index 094927c..2da3329 100644
--- a/src/Interleaver.hpp
+++ b/src/Interleaver.hpp
@@ -29,6 +29,9 @@
 #include <tuple>
 #include <utility>
 #include <vector>
+#if defined _MSC_VER && _MSC_VER <= 1800 // Visual Studio 2013, MSVC++ 12.0
+#define constexpr const
+#endif
 
 // force promotion to double in division
 namespace {
diff --git a/src/Parameters.hpp b/src/Parameters.hpp
index 7e31dd8..90a544d 100644
--- a/src/Parameters.hpp
+++ b/src/Parameters.hpp
@@ -27,6 +27,11 @@
 #include <cmath>
 #include <Eigen/Core>
 #include <vector>
+#if defined(_MSC_VER)
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+typedef SSIZE_T ssize_t;
+#endif
 
 //
 // This implements both phase 1 and phase 2 of the encoding
diff --git a/src/Rand.cpp b/src/Rand.cpp
index cf2444c..93f5991 100644
--- a/src/Rand.cpp
+++ b/src/Rand.cpp
@@ -46,10 +46,12 @@ uint32_t Rand::get (const uint32_t y, const uint8_t i, const uint32_t m)
 }
 
 
+#ifdef __clang__
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wmissing-braces"
 #pragma clang diagnostic ignored "-Wglobal-constructors"
 #pragma clang diagnostic ignored "-Wexit-time-destructors"
+#endif
 
 /* RFC, section 5.5:  Random Numbers
  *
@@ -278,7 +280,9 @@ const std::array<uint32_t, 256> Rand::V3 = {
 	3432275192
 	};
 
+#ifdef __clang__
 #pragma clang diagnostic pop
+#endif
 
 }	// namespace Impl
 }	// namespace RaptorQ
diff --git a/src/degree.hpp b/src/degree.hpp
index 711afe6..31564fe 100644
--- a/src/degree.hpp
+++ b/src/degree.hpp
@@ -22,14 +22,17 @@
 #define RAPTORQ_DEGREE_HPP
 
 #include <array>
+#include <cstdint>
 
 namespace RaptorQ {
 namespace Impl {
 
+#ifdef __clang__
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wmissing-braces"
 #pragma clang diagnostic ignored "-Wglobal-constructors"
 #pragma clang diagnostic ignored "-Wexit-time-destructors"
+#endif
 
 static const std::array<uint32_t, 31> degree_distribution = {
 							  0,    5243,  529531,  704294,  791675,  844104,
@@ -39,7 +42,9 @@ static const std::array<uint32_t, 31> degree_distribution = {
 						1010129, 1011876, 1013490, 1014983, 1016370, 1017662,
 						1048576};
 
+#ifdef __clang__
 #pragma clang diagnostic pop
+#endif
 
 }	// namespace Impl
 }	// namespace RaptorQ
diff --git a/src/deterministic.cpp b/src/deterministic.cpp
index fc1048d..61b08dd 100644
--- a/src/deterministic.cpp
+++ b/src/deterministic.cpp
@@ -19,8 +19,14 @@
  */
 
 #include <array>
+#include <cstdint>
 #include <fstream>
 #include <iostream>
+#if defined(_MSC_VER)
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+typedef SSIZE_T ssize_t;
+#endif
 
 //
 // We work on the "ar" format. refer to
diff --git a/src/multiplication.hpp b/src/multiplication.hpp
index 53504a6..9dbc7c6 100644
--- a/src/multiplication.hpp
+++ b/src/multiplication.hpp
@@ -22,10 +22,12 @@
 namespace RaptorQ {
 namespace Impl {
 
+#ifdef __clang__
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wmissing-braces"
 #pragma clang diagnostic ignored "-Wglobal-constructors"
 #pragma clang diagnostic ignored "-Wexit-time-destructors"
+#endif
 
 static const std::array<uint8_t, 510> oct_exp = {
    1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76,
@@ -84,7 +86,9 @@ static const std::array<uint8_t, 255> oct_log = {
    79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80,
    88, 175};
 
+#ifdef __clang__
 #pragma clang diagnostic pop
+#endif
 
 }	// namespace Impl
 }	// namespace RaptorQ
diff --git a/src/table2.hpp b/src/table2.hpp
index bdde9de..050ba45 100644
--- a/src/table2.hpp
+++ b/src/table2.hpp
@@ -28,12 +28,12 @@
 namespace RaptorQ {
 namespace Impl {
 
-#ifdef USING_CLANG
+#ifdef __clang__
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wmissing-braces"
 #pragma clang diagnostic ignored "-Wglobal-constructors"
 #pragma clang diagnostic ignored "-Wexit-time-destructors"
-#endif	//using_clang
+#endif
 
 // I know, I know. Not exactly 80 colums. You format this, it's just the
 // 3 tables from RFC6330, pages 41-62
@@ -46,9 +46,9 @@ static const std::array<uint16_t, 477> J_K_padded = {254,630,682,293,80,566,860,
 
 static const std::array<std::tuple<uint16_t, uint16_t, uint16_t>, 477> S_H_W = {std::make_tuple(7, 10, 17), std::make_tuple(7, 10, 19), std::make_tuple(11, 10, 29), std::make_tuple(11, 10, 31), std::make_tuple(11, 10, 37), std::make_tuple(11, 10, 41), std::make_tuple(11, 10, 43), std::make_tuple(11, 10, 47), std::make_tuple(11, 10, 53), std::make_tuple(13, 10, 59), std::make_tuple(13, 10, 61), std::make_tuple(13, 10, 61), std::make_tuple(13, 10, 67), std::make_tuple(13, 10, 71), std::make_tuple(13, 10, 73), std::make_tuple(13, 10, 79), std::make_tuple(17, 10, 89), std::make_tuple(17, 10, 97), std::make_tuple(17, 10, 101), std::make_tuple(17, 10, 103), std::make_tuple(17, 10, 107), std::make_tuple(17, 10, 109), std::make_tuple(17, 10, 113), std::make_tuple(19, 10, 127), std::make_tuple(19, 10, 131), std::make_tuple(19, 10, 137), std::make_tuple(19, 10, 139), std::make_tuple(19, 10, 149), std::make_tuple(19, 10, 151), std::make_tuple(23, 10, 163), std::make_tuple(23, 10, 167), std::make_tuple(23, 10, 173), std::make_tuple(23, 10, 179), std::make_tuple(23, 10, 181), std::make_tuple(23, 10, 191), std::make_tuple(23, 10, 193), std::make_tuple(23, 10, 197), std::make_tuple(23, 10, 199), std::make_tuple(23, 10, 211), std::make_tuple(23, 10, 223), std::make_tuple(29, 10, 233), std::make_tuple(29, 10, 241), std::make_tuple(29, 10, 251), std::make_tuple(29, 10, 257), std::make_tuple(29, 10, 263), std::make_tuple(29, 10, 271), std::make_tuple(29, 10, 277), std::make_tuple(29, 10, 283), std::make_tuple(29, 10, 293), std::make_tuple(29, 10, 307), std::make_tuple(29, 10, 313), std::make_tuple(29, 10, 317), std::make_tuple(31, 10, 337), std::make_tuple(31, 10, 349), std::make_tuple(31, 10, 353), std::make_tuple(31, 10, 359), std::make_tuple(31, 10, 367), std::make_tuple(31, 10, 373), std::make_tuple(31, 10, 379), std::make_tuple(37, 10, 389), std::make_tuple(37, 10, 397), std::make_tuple(37, 10, 401), std::make_tuple(37, 10, 409), std::make_tuple(37, 10, 421), std::make_tuple(37, 10, 433), std::make_tuple(37, 10, 443), std::make_tuple(37, 10, 449), std::make_tuple(37, 10, 461), std::make_tuple(37, 10, 467), std::make_tuple(37, 10, 479), std::make_tuple(37, 10, 491), std::make_tuple(37, 10, 499), std::make_tuple(37, 10, 503), std::make_tuple(37, 10, 509), std::make_tuple(37, 10, 523), std::make_tuple(41, 10, 541), std::make_tuple(41, 10, 547), std::make_tuple(41, 10, 557), std::make_tuple(41, 10, 563), std::make_tuple(41, 10, 571), std::make_tuple(41, 10, 577), std::make_tuple(41, 10, 587), std::make_tuple(41, 10, 593), std::make_tuple(41, 10, 601), std::make_tuple(41, 10, 607), std::make_tuple(41, 10, 613), std::make_tuple(41, 10, 619), std::make_tuple(41, 10, 631), std::make_tuple(43, 10, 647), std::make_tuple(43, 10, 653), std::make_tuple(43, 10, 661), std::make_tuple(47, 10, 683), std::make_tuple(47, 10, 691), std::make_tuple(47, 10, 701), std::make_tuple(47, 10, 709), std::make_tuple(47, 10, 719), std::make_tuple(47, 10, 733), std::make_tuple(47, 10, 743), std::make_tuple(47, 10, 751), std::make_tuple(47, 10, 761), std::make_tuple(47, 10, 773), std::make_tuple(53, 10, 797), std::make_tuple(53, 10, 811), std::make_tuple(53, 10, 821), std::make_tuple(53, 10, 829), std::make_tuple(53, 10, 839), std::make_tuple(53, 10, 853), std::make_tuple(53, 10, 863), std::make_tuple(53, 10, 877), std::make_tuple(53, 10, 887), std::make_tuple(53, 10, 907), std::make_tuple(53, 10, 919), std::make_tuple(53, 10, 929), std::make_tuple(53, 10, 941), std::make_tuple(53, 10, 953), std::make_tuple(59, 10, 971), std::make_tuple(59, 10, 983), std::make_tuple(59, 10, 997), std::make_tuple(59, 10, 1009), std::make_tuple(59, 10, 1021), std::make_tuple(59, 10, 1039), std::make_tuple(59, 10, 1051), std::make_tuple(59, 11, 1069), std::make_tuple(59, 11, 1093), std::make_tuple(59, 11, 1103), std::make_tuple(59, 11, 1117), std::make_tuple(59, 11, 1129), std::make_tuple(59, 11, 1153), std::make_tuple(61, 11, 1171), std::make_tuple(61, 11, 1187), std::make_tuple(61, 11, 1201), std::make_tuple(61, 11, 1223), std::make_tuple(61, 11, 1237), std::make_tuple(67, 11, 1259), std::make_tuple(67, 11, 1277), std::make_tuple(67, 11, 1291), std::make_tuple(67, 11, 1307), std::make_tuple(67, 11, 1327), std::make_tuple(67, 11, 1367), std::make_tuple(67, 11, 1381), std::make_tuple(67, 11, 1409), std::make_tuple(67, 11, 1423), std::make_tuple(67, 11, 1439), std::make_tuple(71, 11, 1459), std::make_tuple(71, 11, 1483), std::make_tuple(71, 11, 1499), std::make_tuple(71, 11, 1523), std::make_tuple(71, 11, 1543), std::make_tuple(71, 11, 1559), std::make_tuple(73, 11, 1583), std::make_tuple(73, 11, 1601), std::make_tuple(73, 11, 1621), std::make_tuple(73, 11, 1637), std::make_tuple(73, 11, 1669), std::make_tuple(79, 11, 1699), std::make_tuple(79, 11, 1723), std::make_tuple(79, 11, 1741), std::make_tuple(79, 11, 1759), std::make_tuple(79, 11, 1783), std::make_tuple(79, 11, 1801), std::make_tuple(79, 11, 1823), std::make_tuple(79, 11, 1847), std::make_tuple(79, 11, 1867), std::make_tuple(83, 11, 1889), std::make_tuple(83, 11, 1913), std::make_tuple(83, 11, 1931), std::make_tuple(83, 11, 1951), std::make_tuple(83, 11, 1979), std::make_tuple(83, 11, 2003), std::make_tuple(83, 11, 2029), std::make_tuple(89, 11, 2069), std::make_tuple(89, 11, 2099), std::make_tuple(89, 11, 2131), std::make_tuple(89, 11, 2153), std::make_tuple(89, 11, 2179), std::make_tuple(89, 11, 2221), std::make_tuple(89, 11, 2243), std::make_tuple(89, 11, 2273), std::make_tuple(97, 11, 2311), std::make_tuple(97, 11, 2347), std::make_tuple(97, 11, 2371), std::make_tuple(97, 11, 2399), std::make_tuple(97, 11, 2423), std::make_tuple(97, 11, 2447), std::make_tuple(97, 11, 2477), std::make_tuple(97, 11, 2503), std::make_tuple(97, 11, 2531), std::make_tuple(97, 11, 2557), std::make_tuple(97, 11, 2593), std::make_tuple(101, 11, 2633), std::make_tuple(101, 11, 2671), std::make_tuple(101, 11, 2699), std::make_tuple(101, 11, 2731), std::make_tuple(101, 11, 2767), std::make_tuple(101, 11, 2801), std::make_tuple(103, 11, 2833), std::make_tuple(103, 11, 2861), std::make_tuple(107, 11, 2909), std::make_tuple(107, 11, 2939), std::make_tuple(107, 11, 2971), std::make_tuple(107, 11, 3011), std::make_tuple(109, 11, 3049), std::make_tuple(109, 11, 3089), std::make_tuple(113, 11, 3137), std::make_tuple(113, 11, 3187), std::make_tuple(113, 11, 3221), std::make_tuple(113, 11, 3259), std::make_tuple(113, 11, 3299), std::make_tuple(127, 11, 3347), std::make_tuple(127, 11, 3391), std::make_tuple(127, 11, 3433), std::make_tuple(127, 11, 3469), std::make_tuple(127, 11, 3511), std::make_tuple(127, 11, 3547), std::make_tuple(127, 11, 3583), std::make_tuple(127, 11, 3623), std::make_tuple(127, 11, 3659), std::make_tuple(127, 11, 3701), std::make_tuple(127, 11, 3739), std::make_tuple(127, 11, 3793), std::make_tuple(127, 11, 3833), std::make_tuple(127, 11, 3881), std::make_tuple(127, 11, 3923), std::make_tuple(131, 11, 3967), std::make_tuple(131, 11, 4013), std::make_tuple(131, 11, 4057), std::make_tuple(131, 11, 4111), std::make_tuple(137, 11, 4159), std::make_tuple(137, 11, 4211), std::make_tuple(137, 11, 4253), std::make_tuple(137, 11, 4297), std::make_tuple(137, 11, 4363), std::make_tuple(137, 11, 4409), std::make_tuple(139, 11, 4463), std::make_tuple(139, 11, 4513), std::make_tuple(149, 11, 4567), std::make_tuple(149, 11, 4621), std::make_tuple(149, 11, 4679), std::make_tuple(149, 11, 4733), std::make_tuple(149, 11, 4783), std::make_tuple(149, 11, 4831), std::make_tuple(149, 11, 4889), std::make_tuple(149, 11, 4951), std::make_tuple(149, 11, 5003), std::make_tuple(151, 11, 5059), std::make_tuple(151, 11, 5113), std::make_tuple(157, 11, 5171), std::make_tuple(157, 11, 5227), std::make_tuple(157, 11, 5279), std::make_tuple(157, 11, 5333), std::make_tuple(157, 11, 5387), std::make_tuple(157, 11, 5443), std::make_tuple(163, 11, 5507), std::make_tuple(163, 11, 5563), std::make_tuple(163, 11, 5623), std::make_tuple(163, 11, 5693), std::make_tuple(163, 11, 5749), std::make_tuple(167, 11, 5821), std::make_tuple(167, 11, 5881), std::make_tuple(167, 11, 5953), std::make_tuple(173, 11, 6037), std::make_tuple(173, 11, 6101), std::make_tuple(173, 11, 6163), std::make_tuple(173, 11, 6229), std::make_tuple(179, 11, 6299), std::make_tuple(179, 11, 6361), std::make_tuple(179, 11, 6427), std::make_tuple(179, 11, 6491), std::make_tuple(179, 11, 6581), std::make_tuple(181, 11, 6653), std::make_tuple(181, 11, 6719), std::make_tuple(191, 11, 6803), std::make_tuple(191, 11, 6871), std::make_tuple(191, 11, 6949), std::make_tuple(191, 11, 7027), std::make_tuple(191, 11, 7103), std::make_tuple(191, 11, 7177), std::make_tuple(191, 11, 7253), std::make_tuple(193, 11, 7351), std::make_tuple(197, 11, 7433), std::make_tuple(197, 11, 7517), std::make_tuple(197, 11, 7591), std::make_tuple(199, 11, 7669), std::make_tuple(211, 11, 7759), std::make_tuple(211, 11, 7853), std::make_tuple(211, 11, 7937), std::make_tuple(211, 11, 8017), std::make_tuple(211, 11, 8111), std::make_tuple(211, 11, 8191), std::make_tuple(211, 11, 8273), std::make_tuple(211, 11, 8369), std::make_tuple(223, 11, 8467), std::make_tuple(223, 11, 8563), std::make_tuple(223, 11, 8647), std::make_tuple(223, 11, 8741), std::make_tuple(223, 11, 8831), std::make_tuple(223, 11, 8923), std::make_tuple(223, 11, 9013), std::make_tuple(223, 11, 9103), std::make_tuple(227, 11, 9199), std::make_tuple(227, 11, 9293), std::make_tuple(229, 11, 9391), std::make_tuple(233, 11, 9491), std::make_tuple(233, 11, 9587), std::make_tuple(239, 11, 9697), std::make_tuple(239, 11, 9803), std::make_tuple(239, 11, 9907), std::make_tuple(239, 11, 10009), std::make_tuple(241, 11, 10111), std::make_tuple(251, 11, 10223), std::make_tuple(251, 11, 10343), std::make_tuple(251, 11, 10453), std::make_tuple(251, 11, 10559), std::make_tuple(251, 11, 10667), std::make_tuple(257, 11, 10781), std::make_tuple(257, 11, 10891), std::make_tuple(257, 12, 11003), std::make_tuple(257, 12, 11119), std::make_tuple(263, 12, 11239), std::make_tuple(263, 12, 11353), std::make_tuple(269, 12, 11471), std::make_tuple(269, 12, 11587), std::make_tuple(269, 12, 11701), std::make_tuple(269, 12, 11821), std::make_tuple(271, 12, 11941), std::make_tuple(277, 12, 12073), std::make_tuple(277, 12, 12203), std::make_tuple(277, 12, 12323), std::make_tuple(281, 12, 12451), std::make_tuple(281, 12, 12577), std::make_tuple(293, 12, 12721), std::make_tuple(293, 12, 12853), std::make_tuple(293, 12, 12983), std::make_tuple(293, 12, 13127), std::make_tuple(293, 12, 13267), std::make_tuple(307, 12, 13421), std::make_tuple(307, 12, 13553), std::make_tuple(307, 12, 13693), std::make_tuple(307, 12, 13829), std::make_tuple(307, 12, 13967), std::make_tuple(307, 12, 14107), std::make_tuple(311, 12, 14251), std::make_tuple(311, 12, 14407), std::make_tuple(313, 12, 14551), std::make_tuple(317, 12, 14699), std::make_tuple(317, 12, 14851), std::make_tuple(331, 12, 15013), std::make_tuple(331, 12, 15161), std::make_tuple(331, 12, 15319), std::make_tuple(331, 12, 15473), std::make_tuple(331, 12, 15643), std::make_tuple(337, 12, 15803), std::make_tuple(337, 12, 15959), std::make_tuple(337, 12, 16127), std::make_tuple(347, 12, 16319), std::make_tuple(347, 12, 16493), std::make_tuple(347, 12, 16661), std::make_tuple(349, 12, 16831), std::make_tuple(353, 12, 17011), std::make_tuple(353, 12, 17183), std::make_tuple(359, 12, 17359), std::make_tuple(359, 12, 17539), std::make_tuple(367, 12, 17729), std::make_tuple(367, 12, 17911), std::make_tuple(367, 12, 18097), std::make_tuple(373, 12, 18289), std::make_tuple(373, 12, 18481), std::make_tuple(379, 12, 18679), std::make_tuple(379, 12, 18869), std::make_tuple(383, 12, 19087), std::make_tuple(389, 12, 19309), std::make_tuple(389, 12, 19507), std::make_tuple(397, 12, 19727), std::make_tuple(397, 12, 19927), std::make_tuple(401, 12, 20129), std::make_tuple(401, 12, 20341), std::make_tuple(409, 12, 20551), std::make_tuple(409, 12, 20759), std::make_tuple(419, 13, 20983), std::make_tuple(419, 13, 21191), std::make_tuple(419, 13, 21401), std::make_tuple(419, 13, 21613), std::make_tuple(431, 13, 21841), std::make_tuple(431, 13, 22063), std::make_tuple(431, 13, 22283), std::make_tuple(433, 13, 22511), std::make_tuple(439, 13, 22751), std::make_tuple(439, 13, 22993), std::make_tuple(443, 13, 23227), std::make_tuple(449, 13, 23473), std::make_tuple(457, 13, 23719), std::make_tuple(457, 13, 23957), std::make_tuple(457, 13, 24197), std::make_tuple(461, 13, 24443), std::make_tuple(467, 13, 24709), std::make_tuple(467, 13, 24953), std::make_tuple(479, 13, 25219), std::make_tuple(479, 13, 25471), std::make_tuple(479, 13, 25733), std::make_tuple(487, 13, 26003), std::make_tuple(487, 13, 26267), std::make_tuple(491, 13, 26539), std::make_tuple(499, 13, 26821), std::make_tuple(499, 13, 27091), std::make_tuple(503, 13, 27367), std::make_tuple(509, 13, 27653), std::make_tuple(521, 13, 27953), std::make_tuple(521, 13, 28229), std::make_tuple(521, 13, 28517), std::make_tuple(523, 13, 28817), std::make_tuple(541, 13, 29131), std::make_tuple(541, 13, 29423), std::make_tuple(541, 13, 29717), std::make_tuple(541, 13, 30013), std::make_tuple(547, 13, 30323), std::make_tuple(547, 13, 30631), std::make_tuple(557, 14, 30949), std::make_tuple(557, 14, 31267), std::make_tuple(563, 14, 31583), std::make_tuple(569, 14, 31907), std::make_tuple(571, 14, 32251), std::make_tuple(577, 14, 32579), std::make_tuple(587, 14, 32917), std::make_tuple(587, 14, 33247), std::make_tuple(593, 14, 33601), std::make_tuple(593, 14, 33941), std::make_tuple(599, 14, 34283), std::make_tuple(607, 14, 34631), std::make_tuple(607, 14, 34981), std::make_tuple(613, 14, 35363), std::make_tuple(619, 14, 35731), std::make_tuple(631, 14, 36097), std::make_tuple(631, 14, 36457), std::make_tuple(641, 14, 36833), std::make_tuple(641, 14, 37201), std::make_tuple(643, 14, 37579), std::make_tuple(653, 14, 37967), std::make_tuple(653, 14, 38351), std::make_tuple(659, 14, 38749), std::make_tuple(673, 14, 39163), std::make_tuple(673, 14, 39551), std::make_tuple(677, 14, 39953), std::make_tuple(683, 14, 40361), std::make_tuple(691, 15, 40787), std::make_tuple(701, 15, 41213), std::make_tuple(701, 15, 41621), std::make_tuple(709, 15, 42043), std::make_tuple(709, 15, 42467), std::make_tuple(719, 15, 42899), std::make_tuple(727, 15, 43331), std::make_tuple(727, 15, 43801), std::make_tuple(733, 15, 44257), std::make_tuple(739, 15, 44701), std::make_tuple(751, 15, 45161), std::make_tuple(751, 15, 45613), std::make_tuple(757, 15, 46073), std::make_tuple(769, 15, 46549), std::make_tuple(769, 15, 47017), std::make_tuple(787, 15, 47507), std::make_tuple(787, 15, 47981), std::make_tuple(787, 15, 48463), std::make_tuple(797, 15, 48953), std::make_tuple(809, 15, 49451), std::make_tuple(809, 15, 49943), std::make_tuple(821, 15, 50461), std::make_tuple(821, 16, 50993), std::make_tuple(827, 16, 51503), std::make_tuple(839, 16, 52027), std::make_tuple(853, 16, 52571), std::make_tuple(853, 16, 53093), std::make_tuple(857, 16, 53623), std::make_tuple(863, 16, 54163), std::make_tuple(877, 16, 54713), std::make_tuple(877, 16, 55259), std::make_tuple(883, 16, 55817), std::make_tuple(907, 16, 56393), std::make_tuple(907, 16, 56951)};
 
-#ifdef USING_CLANG
+#ifdef __clang__
 #pragma clang diagnostic pop
-#endif	//using_clang
+#endif
 
 }	// namespace Impl
 }	// namespace RaptorQ
diff --git a/test/rfc_test.cpp b/test/rfc_test.cpp
index 4df776a..d9608c2 100644
--- a/test/rfc_test.cpp
+++ b/test/rfc_test.cpp
@@ -32,6 +32,9 @@
 #include <thread>
 #include <tuple>
 #include <vector>
+#if _MSC_VER <= 1800 // Visual Studio 2013, MSVC++ 12.0
+#define noexcept throw()
+#endif
 
 
 uint64_t decode (uint32_t mysize, std::mt19937_64 &rnd, float drop_prob,
@@ -291,9 +294,13 @@ private:
 
 	    static time_point now() noexcept
 	    {
+#ifdef _MSC_VER
+	        return time_point(duration(static_cast<rep>(__rdtsc())));
+#else
 	        unsigned lo, hi;
 	        asm volatile("rdtsc" : "=a" (lo), "=d" (hi));
 	        return time_point(duration(static_cast<rep>(hi) << 32 | lo));
+#endif
 	    }
 	};
 	// typedef std::chrono::microseconds microseconds;
